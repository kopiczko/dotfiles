#!/bin/bash

# {{{ env

# fix mac LC_CTYPE issue
# see: http://sourabhbajaj.com/python/2014/03/31/fix-valueerror-unknown-locale-utf-8/
if [[ "$LC_CTYPE" == 'UTF-8' ]]; then
  export LC_CTYPE="en_US.UTF-8"
fi

#export TERMINAL=xfce4-terminal
if command -v code >/dev/null 2>&1 ; then
    export EDITOR='code --wait'
elif command -v nvim >/dev/null 2>&1 ; then
    export EDITOR=nvim
fi
#export BROWSER=google-chrome


export PATH=$HOME/.local/bin:$PATH
export MANPATH="$HOME/.local/man:$MANPATH"

# For coreutils and other GNU tools on macOS.
export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"

# }}}

# {{{ env: go

export GOROOT=/usr/local/opt/go/libexec
export GOTMPDIR=$HOME/go/tmp
export GOCACHE=$HOME/go/cache
export GOPATH=$HOME/go
export GOBIN="$GOPATH/bin"
export GO111MODULE="auto"

export PATH=$GOPATH/bin:$GOROOT/bin:$PATH

# }}}
#
# {{{ env: node + pnpm

export PNPM_HOME="${HOME}/.local/lib/pnpm/bin"
export PATH=${PNPM_HOME}:$PATH

# }}}

# {{{ env: fzf

export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'

# }}}

# {{{ env: LastPass

export LPASS_AGENT_TIMEOUT=0

# }}}

# {{{ prompt

if ! command -v starship >/dev/null ; then
    echo "${0}: Error: starship command not found" >&2
else
    eval $(starship init zsh)
fi

my_git_ref() {
    local git_ref
    git_ref=$(command git symbolic-ref --short --quiet HEAD 2> /dev/null)
    local ret=$?

    [[ $ret -eq 0 ]] && { echo $git_ref ; return 0 }
    [[ $ret -eq 128 ]] && return $ret # 128 means not a git repo.

    command git rev-parse --short HEAD 2> /dev/null
}

my_git_repo() {
    local toplevel
    toplevel=$(git rev-parse --show-toplevel 2> /dev/null)
    local ret=$?

    [[ $ret -ne 0 ]] && return $ret

    ## Take last 2 segments.
    #local d=$(dirname "$toplevel")
    #local owner=$(basename "$d")
    #local repo=$(basename "$toplevel")
    #echo "$owner/$repo"

    echo $(basename "$toplevel")
}

#PROMPT=''
#setopt PROMPT_SUBST
#
#prompt_init() {
#    # Check https://github.com/sindresorhus/pure/blob/master/pure.zsh.
#    # Fancy prompt symbol: ❯
#    # Nice grey color: %F{242}
#
#    readonly newline=$'\n'
#
#    local git_ref=$(my_git_ref)
#
#    local kube_ctx=''
#    if command -v kubectx >/dev/null ; then
#        kube_ctx="$(kubectx --current)"
#    elif [[ -e  ~/.kube/config ]] ; then
#        kube_ctx=$(cat ~/.kube/config | grep 'current-context:' | cut -d ' ' -f 2)
#    fi
#
#    PROMPT="%(?.%F{green}.%F{red})%~%f (%F{blue}${git_ref}%f) (%F{blue}${kube_ctx}%f)${newline}$ "
#}

my_title() {
    local git_repo
    git_repo=$(my_git_repo)
    local ret=$?

    local t="$git_repo ($(my_git_ref))"
    [[ $ret -ne 0 ]] && t="$(dirs)"
    [[ $# -gt 0 ]] && t="$t - $@"

    echo -n "$t"
}

tmux_title_init() {
    printf '\033]2;%s\033\\' "$(my_title)"
}

__my_init_newline=0
precmd() {
    # Print empty line between each prompt but not before the first one.
    #[[ -n "${PROMPT}" ]] && echo
    [[ __my_init_newline -eq 1 ]] && echo
    __my_init_newline=1

    #prompt_init
    tmux_title_init
}

# }}}

# vim: fdm=marker

#!/bin/bash

# {{{ env

# fix mac LC_CTYPE issue
# see: http://sourabhbajaj.com/python/2014/03/31/fix-valueerror-unknown-locale-utf-8/
if [[ "$LC_CTYPE" == 'UTF-8' ]]; then
  export LC_CTYPE="en_US.UTF-8"
fi

#export TERMINAL=xfce4-terminal
export EDITOR=nvim
#export BROWSER=google-chrome


export PATH=$HOME/bin:/usr/local/bin:$PATH
export MANPATH="/usr/local/man:$MANPATH"

# For coreutils and other GNU tools on macOS.
export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"

# }}}

# {{{ env: go

export GOROOT=/usr/local/opt/go/libexec
export GOTMPDIR=$HOME/go/tmp
export GOCACHE=$HOME/go/cache
export GOPATH=$HOME/go
export GOBIN="$GOPATH/bin"
export GO111MODULE="auto"

export PATH=$GOPATH/bin:$GOROOT/bin:$PATH

# }}}

# {{{ prompt

PROMPT=''

my_git_ref() {
    local git_ref
    git_ref=$(command git symbolic-ref --short --quiet HEAD 2> /dev/null)
    local ret=$?

    [[ $ret -eq 0 ]] && { echo $git_ref ; exit 0 }
    [[ $ret -eq 128 ]] && return $ret # 128 means not a git repo.

    command git rev-parse --short HEAD 2> /dev/null
}

my_git_repo() {
    local toplevel
    toplevel=$(git rev-parse --show-toplevel 2> /dev/null)
    local ret=$?

    [[ $ret -ne 0 ]] && return $ret

    # Take last 2 segments.
    local d=$(dirname "$toplevel")
    local owner=$(basename "$d")
    local repo=$(basename "$toplevel")
    echo "$owner/$repo"
}

prompt_init() {
    # Check https://github.com/sindresorhus/pure/blob/master/pure.zsh.
    # Fancy prompt symbol: ‚ùØ
    # Nice grey color: %F{242}

    readonly newline=$'\n'

    local git_ref=$(my_git_ref)

    #local window_title
    #{
    #    local git_repo
    #    git_repo=$(my_git_repo)
    #    local ret=$?
    #
    #    # "\e]<;...\a" is the escape sequence for setting terminal window title.
    #    if [[ $ret -ne 0 ]]; then
    #        window_title="\e]<;$(dirs)\a"
    #    else
    #        window_title="\e]<;$git_repo@$git_ref\a"
    #    fi
    #}

    local kube_ctx=''
    if [[ -e  ~/.kube/config ]] ; then
        kube_ctx=$(cat ~/.kube/config | grep 'current-context:' | cut -d ' ' -f 2)
    fi

    PROMPT="%(?.%F{green}.%F{red})%~%f (%F{blue}${git_ref}%f) (%F{blue}${kube_ctx}%f)${newline}$ "
}

setopt PROMPT_SUBST
precmd() {
    # Print empty line between each prompt bunt not before the first one.
    [[ -n "${PROMPT}" ]] && echo
    prompt_init
    #title_init
}

# }}}

# vim: fdm=marker

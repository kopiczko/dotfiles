#!/bin/bash

COMMIT_EDITMSG=$1

if [ -z "$BRANCHES_TO_SKIP" ]; then
  BRANCHES_TO_SKIP=(master dev test)
fi

BRANCH_NAME=$(git symbolic-ref --short HEAD)
if [[ $? -eq 128 ]]; then # Detached head: assuming interactive rebasing
  BRANCH_NAME=$(git branch --no-color | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
  BRANCH_NAME=${BRANCH_NAME#'(no branch, rebasing '}
  BRANCH_NAME=${BRANCH_NAME%')'}
else
  BRANCH_NAME="${BRANCH_NAME##*/}"
fi

BRANCH_EXCLUDED=$(printf "%s\n" "${BRANCHES_TO_SKIP[@]}" | grep -c "^$BRANCH_NAME$")

# Take first part of the branch name split by '-'
a=($(echo $BRANCH_NAME | tr "-" " "))
ISSUE_NUM="${a[0]}"

# check if ISSUE_NUM is a number
re='^[0-9]+$'
if [[ $ISSUE_NUM =~ $re ]] ; then
  msg="$(cat $COMMIT_EDITMSG)"
  # if message already starts with the issue num do nothing
  re="^\[#$ISSUE_NUM\].*"
  if [[ $msg =~ $re ]]; then
    exit 0
  else
    echo "[#$ISSUE_NUM] $msg" >$COMMIT_EDITMSG
  fi
elif [[ $BRANCH_EXCLUDED -ne 1 ]]; then
  echo "prepare-commit-msg: Branch does not contain issue number: '$BRANCH_NAME'" 1>&2
  exit 1
fi

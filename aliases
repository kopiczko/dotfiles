#!/bin/bash

for f in $(find ~/.aliases.d/ -type f); do
    source $f
done

alias vi='nvim'
[[ "$TERM" == "xterm-kitty" ]] && alias ssh='TERM=xterm-256color ssh'

alias aliases='nvim ~/.aliases'
alias envs='nvim ~/.envs'

# From bash's help alias:
#
# A trailing space in VALUE causes the next word to be checked for alias
# substitution when the alias is expanded.
alias watch='watch --color '

alias agv='ag --ignore=vendor'
alias agvt="agv --ignore=vendor --ignore '*_test.go'"
alias brewup="brew update && brew upgrade && brew cleanup"
alias cp='cp -a'
alias cpwd='echo $(pwd) | pbcopy'
alias ct='docker run -it --rm -v $(pwd):/wd:ro --workdir=/wd --name ct quay.io/giantswarm/helm-chart-testing:v2.4.0 ct'
alias golint='golangci-lint run -E gosec -E goconst'
alias gp='git pull'
alias k='kubectl'
alias kg='kubectl --namespace giantswarm'
alias kc='kubectx'
alias klean="yq e 'del(.metadata.managedFields)' -"
alias kleaner="yq e 'del(.metadata.managedFields, .metadata.annotations.\"kubectl.kubernetes.io/last-applied-configuration\", .metadata.uid, .metadata.selfLink, .metadata.resourceVersion, .metadata.creationTimestamp)' -"
alias ll='ls -Ghls --color=auto --group-directories-first --time-style=long-iso'
alias ls='ls --group-directories-first --color=auto'
alias grep='grep --color=auto'
alias rsync='rsync -a'

alias gcloud-reset='docker container rm gcloud-config'
alias gcloud-init='docker run -ti --name gcloud-config gcr.io/google.com/cloudsdktool/google-cloud-cli:alpine gcloud auth login'
# Check ~/.local/bin/gcloud
#alias gcloud=...

alias youtube-dl-mp3='youtube-dl --extract-audio --audio-format mp3'

function gotest() {
    if [[ -f Makefile ]] ; then
        make test
    else
        go test ./...

    fi
}

clean-path() {
    if [[ $# -ne 1 ]]; then
        echo "usage: clean-path CONTENT" >&2
        return 1
    fi
    local r=$(echo $1 | awk -v RS=':' -v ORS=':' '!a[$1]++' | head -1)
    echo ${r%:}
}
clean-path-test() {
    local p='App/bin:/usr/local/opt/go/bin:/usr/local/bin:App/bin:/bin:/bin:/usr/local/bin'
    local want='App/bin:/usr/local/opt/go/bin:/usr/local/bin:/bin'
    local got="$(clean-path $p)"
    if [[ $want != $got ]]; then
        echo "ERROR clean-path-test:\n\twant: $want\n\t got: $got" >&2
        return 1
    fi
}
clean-path-test
